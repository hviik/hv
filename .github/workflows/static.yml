name: Deploy static content to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js to install and run minification tools.
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install minification tools for HTML, CSS, and JS.
      - name: Install minification tools
        run: |
          npm install -g html-minifier-terser uglify-js csso-cli

      # Minify HTML files.
      - name: Minify HTML
        run: |
          echo "Minifying HTML files..."
          find . -type f -iname "*.html" \
            -not -path "./.git/*" -not -path "./.github/*" | while read file; do
              html-minifier-terser --collapse-whitespace --remove-comments --minify-css true --minify-js true "$file" -o "${file}.min"
              mv "${file}.min" "$file"
          done

      # Minify CSS files.
      - name: Minify CSS
        run: |
          echo "Minifying CSS files..."
          find . -type f -iname "*.css" \
            -not -path "./.git/*" -not -path "./.github/*" | while read file; do
              csso "$file" --output "${file}.min"
              mv "${file}.min" "$file"
          done

      # Minify JavaScript files.
      - name: Minify JS
        run: |
          echo "Minifying JS files..."
          find . -type f -iname "*.js" \
            -not -path "./.git/*" -not -path "./.github/*" | while read file; do
              uglifyjs "$file" --compress --mangle -o "${file}.min"
              mv "${file}.min" "$file"
          done

      # Performance Optimization: Gzip Compression for HTML, CSS, JS, and AVIF files.
      - name: Compress assets using gzip
        run: |
          echo "Compressing assets..."
          find . -type f \( -iname "*.html" -o -iname "*.css" -o -iname "*.js" -o -iname "*.avif" \) \
            -not -path "./.git/*" -not -path "./.github/*" -exec gzip -k {} \;
          echo "Compression completed."

      # Performance Optimization: Optimize images (PNG and JPEG).
      - name: Optimize images
        run: |
          echo "Optimizing images..."
          # Optimize PNG images (requires optipng installed on the runner)
          find . -type f -iname "*.png" -not -path "./.git/*" -not -path "./.github/*" -exec optipng {} \; || true
          # Optimize JPEG images (requires jpegoptim installed on the runner)
          find . -type f \( -iname "*.jpg" -o -iname "*.jpeg" \) -not -path "./.git/*" -not -path "./.github/*" -exec jpegoptim --strip-all {} \; || true
          echo "Image optimization completed."

      # Cleanup unneeded directories so only static site files are deployed.
      - name: Clean up repository
        run: |
          echo "Cleaning up repository..."
          rm -rf .git .github
          echo "Cleanup completed."

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Upload the entire repository (now optimized) as the deployment artifact.
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: .

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
